V1 -PREREQUISITES-:
  Mandatory section:
    Section 1: BIG O NOTATION.
    Section 18: DATA STRUCTURES INTRO.
    Section 19: SINGLY LINKED LISTS.
    Section 21: STACKS & QUEUES.
  Highly recommended section:
    Section 20: DOUBLY LINKED LISTS.
V2 -Introduction to Trees-:
  OBJECTIVES:
    Define what a tree is.
    Compare and contrast trees and lists.
    Explain the differences between trees, binary trees, and binary search trees.
    Focus on Binary Search Trees and Implement operations on it.
  WHAT IS A TREE?
    A data structure that consists of nodes in a parent / child relationship.
    End up with branches since each node in the tree can connect to zero or more child nodes.
    The tree can hold any type of data in its node and not only the numbers.
    Examples of how tree can be represented:
      ../Scripts/V2 -Introduction to Trees-/firs-tree-example.png
        The tree can be complex like in this example.
      ../Scripts/V2 -Introduction to Trees-/second-tree-example.png
        The tree can be simple like in this example.
      ../Scripts/V2 -Introduction to Trees-/third-tree-example.png
  Lists VS Trees:
    Lists are linear.
      In SLL you have one pathway to go through.
      In DLL you have two pathways to go through.
    Trees are nonlinear.
      You can have more than two pathways in a tree.
      So we ca say a Singly Linked List is a very special case of a tree, see:
        ../Scripts/V2 -Introduction to Trees-/sll-and-trees.png
  Tree Rules:
    A node can only point to a child, It's a parent child relationship.
      We can't have a child pointing to a parent.
      We can't have a node pointing to a sibling.
      See:
        ../Scripts/V2 -Introduction to Trees-/not-a-tree.png
          This a graph, We'll talk about it later.
    A node needs to have one entry point -one root-:
      See:
        ../Scripts/V2 -Introduction to Trees-/second-example-not-a-tree.png
          We have two beginnings of this tree, so that's not a tree.
  TREE TERMINOLOGY
    Root: The top node in a tree.
    Child: A node directly connected to another node when moving away from the Root.
    Parent: The converse notion of a child.
    Siblings: A group of nodes with the same parent.
    Leaf: A node with no children.
    Edge: The connection between one node and another -arrow in diagrams-.
V3 -Uses For Trees-:
  TREES have a Lots of different applications, like:
    HTML DOM:
      DOM is structured as a tree.
      HTML DOM represents the structure of an HTML document as a tree of nodes.
      Each element, attribute, and piece of text in the HTML is a node in this tree.
      The topmost node is the root node, which corresponds to the <html> element.
      See:
        ../Assets/V3 -Uses For Trees-/html-dom.png
    Network Routing:
      Process used in computer networks. 
      Determine the optimal path for data to travel from one device to another. 
        From the source to the destination. 
      Involves select paths within a network the data packets take to reach the target efficiently.
      Many network routing protocols use tree structures to organize routes.
      Trees are employed in network routing algorithms and that for: 
        Direct data packets through a network efficiently
      See:
        ../Assets/V3 -Uses For Trees-/network-routing-and-tree.jpg
    Abstract Syntax Tree:
      data structure used to represent the structure of a program or code snippet.
      See:
        ../Assets/V3 -Uses For Trees-/abstract-syntax-tree.png
    Artificial Intelligence:
      Trees are fundamental in many AI algorithms and models.
      See:
        ../Assets/V3 -Uses For Trees-/artificial-intelligence-and-tree.jpg
    Computer File Systems:
      See:
        ../Assets/V3 -Uses For Trees-/computer-file-systems.png
V4 -Intro to Binary Trees-:
  Trees categories:
    Heaps.
    Binary Tree.
  Trees types:
    We have a lot of different types of trees like:
      Binary Search Tree.
      Ternary Tree. 
      AVL Tree.
      Red-Black Tree.
  We will focus on:
    Trees.
      Trees in general.
    Binary Trees.
      Special type of Trees.
      Every parent node has at most two children.
    Binary Search Trees. 
      Special type of Binary Trees.
      Every node to the left of a parent node is always less than the parent
      Every node to the right of a parent node is always greater than the parent
      Excel at Searching because of how we store sorted data in it.
  HOW BSTs WORK
    Every parent node has at most two children.
    Every node to the left of a parent node is always less than the parent.
    Every node to the right of a parent node is always greater than the parent.      
V5 -POP QUIZ!-:
  Examples for rules review:
    ../Assets/V5 -POP QUIZ!-/first-example.png
      This is a tree, a binary tree.
    ../Assets/V5 -POP QUIZ!-/second-example.png
      This is a tree, but it's not a binary tree, the root node have tree nodes.
    ../Assets/V5 -POP QUIZ!-/third-example.png
      This is a tree, a binary tree, and specially a binary search tree.
    ../Assets/V5 -POP QUIZ!-/forth-example.png
      This is a tree, a binary tree, but it's not a binary search tree.
    ../Assets/V5 -POP QUIZ!-/fifth-example.png
      This is a tree, but it's not a binary tree.
    ../Assets/V5 -POP QUIZ!-/sixth-example.png
      This is a tree, a binary tree, but it's not a binary search tree.
V6 -Searching A Binary Search Tree-:
  Binary Search Tree Advantages:
    The search part becomes very quick compared to looking for a node in an unsorted tree.
    Since we have all the greater number in the the right and all the smallest number in the left:
      It's just a comparison matter.
    Basically, every comparison we do should roughly chop in half the number of values we look at.
      We may have much more nodes in a part rather than other but on average: 
        We cut the number of comparisons -the number of nodes- in half.
V7 -Our Tree Classes-:
  Constructor Code:
    ../Scripts/V7 -Our Tree Classes-/constructor-code.js
  My Implementation:
    ../Scripts/V7 -Our Tree Classes-/my-implementation.js
V8 -BST: Insert-:
  My Early Try Of Insert Method:
    ../Scripts/V8 -BST Insert-/my-early-try-of-insert-method.js
  INSERTING A NODE PseudoCode:
    Steps - Iteratively or Recursively
      Create a new node
      Starting at the root
      Check if there is a root, if not - the root now becomes that new node!
      If there is a root: 
        Check if the value of the new node is greater than or less than the value of the root.
      If it is greater 
      Check to see if there is a node to the right
      If there is, move to that node and repeat these steps
      If there is not, add that node as the right property
      If it is less
      Check to see if there is a node to the left
      If there is, move to that node and repeat these steps
      If there is not, add that node as the left property
V9 -BST: Insert Solution-:
  Constructor Solution:
    ../Scripts/V9 -BST Insert Solution-/constructor-solution.js
  BST and duplicate values:
    Basically we have more than one way to deal with duplicate values:
      Ignore them and that what we are doing.
      Add them To One Side:
        Add them to the left/right side of the node that has the same value.
      Store a count of how many times a value occurs in the BST node itself:
        reduces the number of nodes and simplifies traversal and inserting also.
V10 -BST: Find-:
  My Early Try Of Find Method:
    ../Scripts/V10 -BST Find-/my-early-try-of-find-method.js
  Finding a Node in a BST, PseudoCode:
    Steps - Iteratively or Recursively
      Starting at the root
      Check if there is a root, if not - we're done searching!
      If there is a root: 
        Check if the value of the new node is the value we are looking for. 
        If we found it, we're done!
      If not, check to see if the value is greater than or less than the value of the root
      If it is greater 
      Check to see if there is a node to the right
      If there is, move to that node and repeat these steps
      If there is not, we're done searching!
      If it is less
      Check to see if there is a node to the left
      If there is, move to that node and repeat these steps
      If there is not, we're done searching!
V11 -BST: Find Solution-:
  Constructor Solution:
    ../Scripts/V11 -BST Find Solution-/constructor-solution.js
  My Second Implementation Using Constructor Approach:
    ../Scripts/V11 -BST Find Solution-/my-implementation-with-constructor-approach.js
V12 -Big O of Binary Search Trees-:
  Big O of BST
    Insertion is O(log n) in the average and the best case also.
    Searching is O(log n) in the average and the best case also.
      These measurements are not guaranteed since we may have some weird BSTs those: 
        Have a lot much number of nodes in a part comparing of other, for example:
          ../Assets/V12 -Big O of Binary Search Trees-/weird-bst.png
            If you had a completely one sided tree like this the insertion and searching will be:
              O(n).
            We can solve this problem by: 
              Rewrite this BST by picking up a proper root.
              Use a different Data Structure, like SLL.
      Log n it's very good, and we have it here because in normal good BST:
        In each time we duplicate the number of nodes we will have to add one additional step, see:
          ../Assets/V12 -Big O of Binary Search Trees-/bst-and-log-n-explanation.png
          ../Assets/V12 -Big O of Binary Search Trees-/bst-and-log-n-graph.png
===================================================================================================