V1 -PREREQUISITES-:
  Mandatory sections:
    Section 1: BIG O NOTATION
    Section 6: RECURSION
    Section 24: BINARY HEAPS -The Priority Queue Videos-
    Section 26: GRAPHS
    Section 27: GRAPH TRAVERSAL
  Highly recommended sections:
    Section 18: DATA STRUCTURES INTRO
    Section 19: SINGLY LINKED LISTS
    Section 21: STACKS & QUEUES
    Section 20: DOUBLY LINKED LISTS
V2 -Intro to Dijkstra's and Prerequisites-:
  Dijkstra's algorithm:
    Shortened from Dijkstra's shortest path algorithm.
    It requires a graph and binary heap priority queue data structure.
      It acts upon a graph, it searches across it.
        Dijkstra's algorithm works on a weighted graph.
      Uses a binary heap priority queue as part of its implementation.
  OBJECTIVES:
    Understand the importance of Dijkstra's.
    Implement a Weighted Graph.
    Walk through the steps of Dijkstra's.
    Implement Dijkstra's using a naive priority queue.
    Implement Dijkstra's using a binary heap priority queue.
V3 -Who was Dijkstra and what is his Algorithm?-:
  What is the Dijkstra's algorithm:
    One of the most famous and widely used algorithms around!
    It all about find the shortest path between two vertices on a graph.
      What's the fastest way to get from point A to point B.
  Who was Dijkstra:
    Edsger W. Dijkstra.
    Smart and influence polymath scientific, a lot of his discoveries still used until now.
  Why is it useful:
    GPS -finding fastest route-.
      There's a lot of other complications in today's world, like:
        Google Maps algorithm takes not only the distance but also:
          Capacity of a road.
          Number of lanes.
          Accidents.
      But it's still based on finding the shortest path -what make it shorter might be different-.
    Network Routing -finds open shortest path for data-.
      We have bunch of computers connected in a graph, we do the following:
        Break up a large message into a bunch of little pieces. 
        Send them across a bunch of computers and end up at the target computer.
          In this process we need to know the fastest, shortest way to get there.
    Biology -used to model the spread of viruses among humans-.
    Airline tickets -finding cheapest route to your destination-.
    Many other uses!
V4 -Writing a Weighted Graph-:
  My Early Try Of Writing A Weighted Graph
    ../Scripts/V4 -Writing a Weighted Graph-/my-early-try-of-writing-weighted-graph.js
  Constructor Solution:
    ../Scripts/V4 -Writing a Weighted Graph-/constructor-solution.js
  The change making to make an unweighted graph to a weighted one in terms of adding:
    Just make the vertex as object, storing both the value -name- and the weight.
V5 -Walking through the Algorithm-:
  My Early Try To Implement Dijkstra Algorithm:
    ../Scripts/V5 -Walking through the Algorithm-/my-early-tyr-to-implement-dijkstra-algorithm.js
  The Approach:
    Every time we look to visit a new node. 
      We pick the node with the smallest known distance to visit first.
    Once we’ve moved to the node we’re going to visit, we look at each of its neighbors.
    For each neighboring node. 
      We calculate the distance by summing the total edges that lead to the node. 
        We’re checking from the starting node.
    If the new total distance to a node is less than the previous total. 
      We store the new shorter distance for that node.
  Diagram Explain The Point Visually
    https://cs.slides.com/colt_steele/graphs#/84
V6 -Introducing Our Simple Priority Queue-:
  Constructor naive implementation of priority queue:
    ../Scripts/V6 -Introducing Our Simple Priority Queue-/constructor-naive-priority-queue.js
      We sort by the built-in method -sort-.
        It's not the best since it's O(n log (n))
V7 -Dijkstra's Pseudo-Code-:
  Dijkstra's PseudoCode:
    This function should accept a starting and ending vertex.
    Create an object -we'll call it distances-.
      Set each key to be every vertex in the adjacency list with a value of infinity. 
        Except for the starting vertex which should have a value of 0.
    After setting a value in the distances object. 
      Add each vertex with a priority of Infinity to the priority queue. 
        Except the starting vertex, which should have a priority of 0 because that's the begin.
    Create another object called previous. 
    Set each key to be every vertex in the adjacency list with a value of null.
    Start looping as long as there is anything in the priority queue.
      Dequeue a vertex from the priority queue.
      If that vertex is the same as the ending vertex - we are done!
      Otherwise loop through each value in the adjacency list at that vertex.
        Calculate the distance to that vertex from the starting vertex
      If the distance is less than what is currently stored in our distances object.
        update the distances object with new lower distance
        update the previous object to contain that vertex.
      Enqueue the vertex with the total distance from the start node
V8 -Implementing Dijkstra's Algorithm-:
  Constructor Solution First Version:
    ../Scripts/V8 -Implementing Dijkstra's Algorithm-/constructor-solution.js
  My Enhanced Version:
    ../Scripts/V8 -Implementing Dijkstra's Algorithm-/my-second-version-dijkstra-algorithm.js
V9 -Upgrading the Priority Queue-:
  Constructor Solution:
    ../Scripts/V9 -Upgrading the Priority Queue-/constructor-solution.js
      Just changed the naive priority queue to a true one.
===================================================================================================