V1 -PREREQUISITES-:
  Mandatory section:
    Section 1: BIG O NOTATION.
    Section 6: RECURSION
  Highly recommended section:
    Section 10: BUBBLE SORT
    Section 11: SELECTION SORT
    Section 12: INSERTION SORT
    Section 14: MERGE SORT
V2 -Introduction to Quick Sort-:
  Quick Sort Work Mechanism:
    Each time it takes an element from whatever place and put it in its correct ordered place.
      This item called -pivot-.
      And that can be done by two ways at least:
        One i thought about.
        One the constructor came with.
    Then split the two array to apply the same process in each one separately.
      Because after the putting process we sure that:
        The biggest numbers are in a part and the smallest are in the other parts.
        Each item should be compared just with th left items those are with it after separation.
          And this is basically the power and the trick here, Impressive!!.
V3 -Pivot Helper Introduction-:
  Pivot Position:
    Choose a pivot position is actually an important decision.
      The runtime of quicksort can change depending on where you pick the pivot from.
  Pivot Function:
    We can have a helper function in our QuickSort that:
      Change the original array by:
        Putting the pivot element in its correct place. 
        Reorder the other items in the correct side correspondent to the pivot.
      Return the index of the pivot item after reorder. 
  Pivot PseudoCode:
    It will help to accept three arguments: 
      An array, a start index, and an end index 
        Can be default to 0 and the array length minus 1, respectively.
    Grab the pivot from the start of the array. 
    Store the current pivot index in a variable.
      This will keep track of where the pivot should end up-
    Loop through the array from the start until the end.
      If the pivot is greater than the current element: 
        Increment the pivot index variable.
        Swap the current element with the element at the pivot index.
    In the end: 
      Swap the starting element -the pivot- with the pivot index.
      Return the pivot index.
V4 -Pivot Helper Implementation-:
  Constructor Implementations:
    Older Syntax Implementation:
      ../Scripts/V4 -...-/Constructor Implementation/older-version-syntax.js
    ES2015 Syntax Implementation:
      ../Scripts/V4 -...-/Constructor Implementation/es2015-version-syntax.js
    Note:
      The constructor solution pull the smaller numbers to the left.
      I push the biggest to the right.
      On general i believe the both solutions are the same.
V5 -Quick Sort Implementation-:
  Quick Sort Implementation:
    Constructor Implementation:
      ../Scripts/V5 -Quick Sort Implementation-/constructor-implementation.js
    My Implementation:
      ../Scripts/V5 -Quick Sort Implementation-/my-implementation.js
        I couldn't solve it until seeing some hints.
        If i want to loop over a SubArray inside the original one without divide it.
          I should find the pattern to defined the first and last element in that SubArray.
            Then work starting from those data and continue with the same approach.
              In each time before start iteration define the start and the end index.
          We basically instead of cutting the array in those indexes, we pass them to stop at them.
        If i will use the SubArrays in my solution, i can help myself understanding the problem by:
          Take the original array and split it, even if i will not split it actually in my code.
        To understand the recursive function well we can: 
          Write for each recursive call its inputs or logs them. 
  Quicksort PseudoCode:
    Call the pivot helper on the array.
    When the helper returns to you the updated pivot index. 
      Recursively call the pivot helper on: 
        the SubArray to the left of that index, and the SubArray to the right of that index.
    Your base case occurs when you consider a SubArray with less than 2 elements.
V6 -Quick Sort Call Stack Walkthrough-:
  Call Stack Monitoring.
V7 -Quick Sort Big O Complexity-:
  Quick Sort and Big O:
    Time Complexity:
      Best Case is O(n log n).
      Average Case is O(n log n).
      Worst Case O(nÂ²).
        If we each time select a pivot that will have just one side, and the other is empty.
          Example:
            We have a sorted array from smallest to biggest, and our pivot is the: 
              first element or the last element.
          If we try to sort an array from smallest to biggest and we always choose the:
            Biggest Item or the Smallest Item as a pivot.
          That means we will do:
            -n- decomposition and not -log n-.
            Add to this another -n- for iterate over the array each time we select a pivot.
    Space Complexity:
      Best Case is O(log n).
      Average Case is O(log n).
      Worst Case is O(n):
        Quick sort may have a space complexity of O(n). 
        This happens when the pivot selection is poor. 
          Leading to unbalanced partitions where one side is much larger than the other. 
          Like always picking the smallest or largest element as the pivot in a sorted array.
===================================================================================================
