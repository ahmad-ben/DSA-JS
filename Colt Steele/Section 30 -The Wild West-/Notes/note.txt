V1 -VERY IMPORTANT NOTE! PLEASE READ!-:
  Important Note!
    This section is the wild west of this course.  
    It contains all the exercises the constructor work on adding to the rest of the course.  
      The exercise may be not 100% finished, keep this in your mind.
V2 -Coding Exercise 35: SLL - push Exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 68.
  My Solution:
    ../Scripts/V2 -Coding Exercise 35 SLL push Exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V4 -...-/constructor-solution.js
V3 -Coding Exercise 36: SLL - pop exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 91.
  My Solution:
    ../Scripts/V3 -Coding Exercise 36 SLL pop exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V6 -...-/constructor-solution.js
V4 -Coding Exercise 37: SLL - get Exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 141.
  My Solution:
    ../Scripts/V4 -Coding Exercise 37 SLL get Exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V12 -...-/constructor-solution.js
V5 -Coding Exercise 38: SLL - set Exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 153.
  My Solution:
    ../Scripts/V5 -Coding Exercise 38 SLL set Exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V14 -...-/constructor-solution.js
V6 -Coding Exercise 39: SLL - insert Exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 166.
  My Solution:
    ../Scripts/V6 -Coding Exercise 39 SLL insert Exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V16 -...-/constructor-solution.js
V7 -Coding Exercise 40: SLL - remove Exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 192.
  My Solution:
    ../Scripts/V7 -Coding Exercise 40 SLL remove Exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V18 -...-/constructor-solution.js
V8 -Coding Exercise 41: SLL - rotate Exercise-:
  Exercise Description:
    SLL - rotate Exercise
    Implement the rotate function on the SinglyLinkedList class.
    This function should rotate all the nodes in the list by some number passed in. For instance:
      If your list looks like 1 -> 2 -> 3 -> 4 -> 5 and you rotate by 2. 
      The list should be modified to 3 -> 4 -> 5 -> 1 -> 2. 
      The number passed in to rotate can be any integer.
        Time Complexity: O(N), where N is the length of the list.
        Space Complexity: O(1).
  My Solution:
    ../Scripts/V8 -Coding Exercise 41 SLL rotate Exercise-/my-solution.js
V9 -Coding Exercise 42: Divide and Conquer - countZeroes-:
  Exercise Description:
    Given an array of 1s and 0s which has all 1s first followed by all 0s. 
    Write a function called countZeroes, which returns the number of zeroes in the array.
    Constraints
      Time Complexity - O(log n)
    Inputs & Outputs Examples:
      countZeroes([1,1,1,1,0,0])  => 2
      countZeroes([1,0,0,0,0])    => 4
      countZeroes([0,0,0])        => 3
      countZeroes([1,1,1,1])      => 0
    See:
  My Solution:
    ../Scripts/V9 -Coding Exercise 42 Divide and Conquer countZeroes-/my-solution.js
V10 -Coding Exercise 43: Divide and Conquer - sortedFrequency-:
  Exercise Description:
    Given a sorted array and a number. 
    Write a function called sortedFrequency that counts the occurrences of the number in the array.
    Constraints:
      Time Complexity: O(log n)
    Inputs & Outputs Examples:
      sortedFrequency([1,1,2,2,2,2,3],2) // 4 
      sortedFrequency([1,1,2,2,2,2,3],3) // 1 
      sortedFrequency([1,1,2,2,2,2,3],1) // 2 
      sortedFrequency([1,1,2,2,2,2,3],4) // -1
    See:
  My Solutions:
    Initial solution:
      ../Scripts/V10 -Coding Exercise 43 Divide and Conquer sortedFrequency-/my-solution.js
        After asking Chatgpt i found that the first solution may not be always O(log n).
    Enhanced Solution:
      ../Scripts/V10 -...-/my-enhanced-solution.js
        After getting the general idea of the optimal solution from Chatgpt.
  Chatgpt solution:
    ../Scripts/V10 -Coding Exercise 43 Divide and Conquer sortedFrequency-/chatgpt-solution.js
V11 -Coding Exercise 44: Divide and Conquer - findRotatedIndex-:
  Exercise Description:
    Write a function called findRotatedIndex. 
    It accepts a rotated array of sorted numbers and an integer. 
    The function should return the index of the integer in the array. 
    If the value is not found, return -1.
    Constraints:
      Time Complexity - O(log n)
      Space Complexity - O(1)
    Inputs & Outputs Examples:
      findRotatedIndex([3,4,1,2],4)                     => 1
      findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 8)     => 2
      findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 3)     => 6
      findRotatedIndex([37,44,66,102,10,22],14)         => -1
      findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 12)    => -1
      findRotatedIndex([11,12,13,14,15,16,3,5,7,9], 16) => 5
  My Solution:
    ../Scripts/V11 -Coding Exercise 44 Divide and Conquer findRotatedIndex-/my-solution.js
V12 -Coding Exercise 45: Bubble Sort-:
  Exercise Description:
    Implement a function called bubbleSort. 
    Given an array, bubbleSort will sort the values in the array. 
    The function takes 2 parameters: 
      an array and an optional comparator function.
        function bubbleSort(arr, comparator) {
          if (typeof comparator !== 'function') {
            // provide a default
          }
        }
      Comparator function is a callback that will take two values from the array to be compared. 
      The function returns:
        Negative value if the first value is less than the second.
        Positive value if the first value is greater than the second. 
        0 if both values are equal.
    The default comparator you provide should assume that the two parameters are numbers. 
      That we are sorting the values from smallest to largest.
    Bubble sort is an O(n^2) algorithm, You can read more about it here: 
      www.rithmschool.com/courses/javascript-computer-science-fundamentals/basic-sorting-algorithms
    Inputs & Outputs Examples:
      bubbleSort([4, 20, 12, 10, 7, 9]);  => [4, 7, 9, 10, 12, 20]
      bubbleSort([0, -10, 7, 4]);         => [-10, 0, 4, 7]
      bubbleSort([1, 2, 3]);              => [1, 2, 3]
      bubbleSort([]);
      More Examples are in the solution file for test.
  My Solution:
    ../Scripts/V12 -Coding Exercise 45 Bubble Sort-/my-solution.js
  Chatgpt Solution:
    ../Scripts/V12 -Coding Exercise 45 Bubble Sort-/chatgpt-solution.js
V13 -Coding Exercise 46: Selection Sort-:
  Exercise Description:
    Here's some guidance for how selection sort should work:
      Assign the first element to be the smallest value -this is called the minimum-. 
      It does not matter right now if this actually the smallest value in the array.
      Compare this item to the next item in the array until you find a smaller number.
      If a smaller number is found. 
        Designate it to be the new "minimum" and continue until the end of the array.
      If the "minimum" is not the value -index- you initially began with. 
        Swap the two values. 
          You will now see that the beginning of the array is in the correct order. 
            Similar to how after the first iteration of bubble sort: 
              We know the rightmost element is in its correct place.
      Repeat this with the next element until the array is sorted.
    Inputs & Outputs Examples:
      The same examples of bubble sort.
    This algorithm has a O(n^2) time complexity. You can read more about them here: 
      www.rithmschool.com/courses/javascript-computer-science-fundamentals/basic-sorting-algorithms
  My Solution:
    ../Scripts/V13 -Coding Exercise 46 Selection Sort-/my-solution.js
V14 -Coding Exercise 47: Insertion Sort-:
  Exercise Description:
    Implement insertionSort  
      Given an array, both algorithms will sort the values in the array. 
      The functions take 2 parameters:
        an array and an optional comparator function. 
      Comparator function is a callback that will take two values from the array to be compared. 
      The function returns:
        A negative value if the first value is less than the second.
        A positive value if the first value is greater than the second.
        0 if both values are equal. 
      The default comparator you provide should assume that the two parameters are numbers. 
        And we are sorting the values from smallest to largest.
    Here's some guidance for how insertion sort should work:
      Start by picking the second element in the array:
        We will assume the first element is the start of the "sorted" portion.
      Now compare the second element with the one before it and swap if necessary.
      Continue to the next element:
        If it is in the incorrect order: 
          Iterate through the sorted portion to place the element in the correct place.
      Repeat until the array is sorted.
    Implement insertion sort:
      Your function should accept an array and return an array of sorted values.
    Inputs & Outputs Examples:
      The same examples of bubble sort.
  My Solution:
    ../Scripts/V14 -Coding Exercise 47 Insertion Sort-/my-solution.js
  Coursemate Solution:
    ../Scripts/V14 -Coding Exercise 47 Insertion Sort-/coursemate-solution.js
      Short and nice solution.
V15 -Coding Exercise 48: Sorting Exercise - merge helper-:
  Exercise Description:
    Given two sorted arrays: 
      Write a function called merge which: 
        Accepts two SORTED arrays.
        Returns a new array with both of the values from each array sorted.
        Run in O(n + m) time and O(n + m) space.
        It doesn't modify the parameters passed to it.
        As before, the function should default to sorting numbers in ascending order. 
        If you pass in a comparator function as a third argument: 
          This comparator is what will be used. 
            -Note that the input arrays will always be sorted according to the comparator!-
    Do not use the built in sort method! 
    We're going to use this helper to implement a sort.
      The helper itself shouldn't depend on a sort.
    Inputs & Outputs Examples:
      Example 1:
        var arr1 = [1,3,4,5];
        var arr2 = [2,4,6,8];
        merge(arr1,arr2) => [1,2,3,4,4,5,6,8]
      Example 2:
        var arr3 = [-2,-1,0,4,5,6];
        var arr4 = [-3,-2,-1,2,3,5,7,8];
        merge(arr3,arr4); => [-3,-2,-2,-1,-1,0,2,3,4,5,5,6,7,8]
      Example 3:
        var arr5 = [3,4,5]
        var arr6 = [1,2]
        merge(arr5,arr6) => [1,2,3,4,5]
      More Examples are in the solution file for test.
  My Solution:
    ../Scripts/V15 -Coding Exercise 48 Sorting Exercise merge helper-/my-solution.js
V16 -Coding Exercise 49: Merge Sort-:
  Exercise Description:
    Implement the merge sort algorithm. 
    Given an array, this algorithm will sort the values in the array. 
    The functions take 2 parameters: an array and an optional comparator function.
    The comparator function is a callback that will take two values from the array to be compared.
    The function returns:
      A negative value if the first value is less than the second. 
      A positive value if the first value is greater than the second.
      0 if both values are equal.
    The default comparator you provide: 
      Should assume that the two parameters are numbers. 
        We are sorting the values from smallest to largest.
    Here's some guidance for how merge sort should work:
      Break up the array into halves until you can compare one value with another.
      Once you have smaller sorted arrays: 
        Merge those arrays with other sorted pairs.
          Until you are back at the full length of the array
      Once the array has been merged back together. 
        Return the merged -and sorted- array
      In order to implement this function. 
        You'll also need to implement a merge function. 
          That takes in two sorted arrays and a comparator and returns a new sorted array. 
          You implemented this function in the previous exercise, so copy and paste that code here.
    You can read more merge sort here: 
      "https://www.rithmschool.com/courses/
        javascript-computer-science-fundamentals/intermediate-sorting-algorithms"
  My Solution:
    ../Scripts/V16 -Coding Exercise 49 Merge Sort-/my-solution.js
  Constructor Solution:
    ../Scripts/V16 -Coding Exercise 49 Merge Sort-/chatgpt-solution.js
V17 -Coding Exercise 50: Sorting Exercise - pivot helper-:
  Exercise Description:
    In this exercise, your goal is to implement a function called pivot. 
    This function contains nearly all of the logic you'll need in order to implement Quick Sort.
    The pivot  function is responsible for: 
      Taking an array.
      Setting the pivot value.
      Mutating the array so that: 
        All values less than the pivot wind up to the left of it.
        All values greater than the pivot wind up to the right of it. 
        It's also helpful if this helper returns the index of where the pivot value winds up.
    Inputs & Outputs Examples:
      Example 1:
        var arr = [4, 2, 5, 3, 6];
        pivot(arr);  => 2
        arr;         => [3, 2, 4, 5, 6];
        More Examples are in the solution file for test.
  My Solution:
    ../Scripts/V17 -Coding Exercise 50 Sorting Exercise pivot helper-/my-solution.js
V18 -Coding Exercise 51: Quick Sort-:
  Exercise Description:
    You can check out this video from Computerphile as a quick introduction to how quicksort works:
      https://www.youtube.com/watch?v=XE4VP_8Y0BU
    The algorithm is as follows:
      Pick an element in the array and designate it as the "pivot". 
        While there are quite a few options for choosing the pivot. 
        We'll make things simple to start, and will choose the pivot as the first element. 
        This is not an ideal choice, but it makes the algorithm easier to understand for now.
    Next, compare every other element in the array to the pivot.
      If it's less than the pivot value, move it to the left of the pivot.
      If it's greater, move it to the right.
    Once you have finished comparing, the pivot will be in the right place.
    Next, recursively call quicksort again with the left and right halves from the pivot.
      Until the array is sorted.
    It's easiest to implement Quick Sort with the aid of your pivot helper.
      From the earlier exercise. 
    The default comparator you provide should assume that the two parameters are numbers. 
      We are sorting the values from smallest to largest.
    Inputs & Outputs Examples:
      quickSort([4, 20, 12, 10, 7, 9]);    => [4, 7, 9, 10, 12, 20]
      quickSort([0, -10, 7, 4]);           => [-10, 0, 4, 7]
      quickSort([1, 2, 3]);                => [1, 2, 3]
      More Examples are in the solution file for test.
  My Solution:
    ../Scripts/V18 -Coding Exercise 51 Quick Sort-/my-solution.js
  Chatgpt Solution:
    ../Scripts/V18 -Coding Exercise 51 Quick Sort-/chatgpt-solution.js
V19 -Coding Exercise 52: Radix Sort Helper - getDigit-:
  Exercise Description:
    Implement a function called getDigit.
    It accepts a positive integer and a position. 
      Returns the digit in that number at the given position. 
    The position reads from right to left, so the 0th position corresponds to the rightmost digit.
    Inputs & Outputs Examples:
      console.log(getDigit(12345, 0)); => 5
      console.log(getDigit(12345, 1)); => 4
      console.log(getDigit(12345, 2)); => 3
      console.log(getDigit(12345, 3)); => 2
      console.log(getDigit(12345, 4)); => 1
      console.log(getDigit(12345, 5)); => 0
  My Solution:
    ../Scripts/V19 -Coding Exercise 52 Radix Sort Helper getDigit-/my-solution.js
V20 -Coding Exercise 53: Radix Sort Helper - digitCount-:
  Exercise Description:
    Implement a function called digitCount.
    It accepts a positive integer and returns the number of digits that the integer has.
    Inputs & Outputs:
      digitCount(1);      => 1
      digitCount(9);      => 1
      digitCount(25);     => 2
      digitCount(314);    => 3
      digitCount(1234);   => 4
      digitCount(77777);  => 5
  My Solution:
    ../Scripts/V20 -Coding Exercise 53 Radix Sort Helper digitCount-/my-solution.js
  Constructor Solution:
    ../../Section 17 -...-/Scripts/V3 -...-/Constructor Helper Methods/digit-count.js
V21 -Coding Exercise 54: Radix Sort Helper - mostDigits-:
  Exercise Description:
    Implement a function called mostDigits.
    It accepts an array of integers.
    Returns a count of the number of digits for the number in the array with the most digits.
    It may help to use your digitCount code from the previous exercise in this function.
    Inputs & Outputs Examples:
      mostDigits([1, 9, 10, 100, 99]);      => 3
      mostDigits([100, 1010, 1, 500]);      => 4
      mostDigits([0, 100000, 400, 12, 8]);  => 6
      mostDigits([]);                       => 0
  My Solution:
    ../Scripts/V21 -Coding Exercise 54 Radix Sort Helper mostDigits-/my-solution.js
V22 -Coding Exercise 55: Radix Sort-:
  Exercise Description:
    Write a function called radixSort.
    It accepts an array of numbers and sorts them in ascending order.
    You'll need to make use of the helper functions from the previous exercises.
    Inputs & Outputs Examples:
      radixSort([8, 6, 1, 12]);                 =>[1, 6, 8, 12]
      radixSort([10, 100, 1, 1000, 10000000]);  =>[1, 10, 100, 1000, 10000000]
V23 -Coding Exercise 56: Stacks - push Exercise-:
  Exercise Description:
    Implement the push method on the Stack class:
      Takes in a node and puts it at the top of the stack. 
      Should return the new size of the stack.
  Important note:
    In the stack each node should have a refer to the previous node before it.
      that makes the process of knowing the new top item after a pop easier. 
  My Solution:
    ../Scripts/V23 -Coding Exercise 56 Stacks push Exercise-/my-solution.js
V24 -Coding Exercise 57: Stacks - pop Exercise-:
  Exercise Description:
    Implement the pop method on the Stack class
      Removes the node at the top of the stack and returns the value of that node.
      Note: The tests for pop rely on push working.
  My Solution:
    ../Scripts/V24 -Coding Exercise 57 Stacks pop Exercise-/my-solution.js
V25 -Coding Exercise 58: Stack with 2 Queues-:
  Exercise Description:
    Implement a stack using two queues:
      You should implement the following functions:
        Push -returns the stack-.
        Pop -returns the value popped-.
  My Solution:
    ../Scripts/V25 -Coding Exercise 58 Stack with 2 Queues-/my-solution.js
      My first solution try.
    ../Scripts/V25 -Coding Exercise 58 Stack with 2 Queues-/my-enhanced-solution.js
      After asking CHATGPT if the first solution is correct and understand the idea more and more.
  Stack VS Queue:
    Stack:
      Elements are added and removed from the top -Last In, First Out, or LIFO-.
      Top always refers to the most recently added element.
      When a new node is pushed, it becomes the new top and points to the previous top.
      Only the top can be removed -popped- at any time. 
      Elements below the top are inaccessible until the elements above them are removed.
      Only the top is accessed, and elements are removed in the reverse order of addition.
    Queue:
      Elements are added at the end -tail- and removed from the front -head-. 
        First In, First Out, or FIFO.
      The head stays the same until we dequeue. 
        It always refers to the oldest element in the queue.
      New nodes are added at the tail, while the head is the one dequeued first.
      The head node is always removed first, and the next node becomes the new head.
      The head remains at the front until dequeued. 
      Elements are removed in the order of addition.
V26 -Coding Exercise 59: Queues - enqueue Exercise-:
  Exercise Description:
    Implement the enqueue method on the Queue class.
    This function adds the value to the end of the queue. 
    This should be an O(1) operation and return the new size of the queue.
  My Solution:
    ../Scripts/V26 -Coding Exercise 59 Queues enqueue Exercise-/my-solution.js
V27 -Coding Exercise 60: Binary Search Tree - insert Exercise-:
  Exercise Description:
    Write a the insert function on the BinarySearchTree class:
      Accepts a value and inserts it into the BST in the correct position. 
      The function should return the binary search tree. 
  My Solution:
    ../Scripts/V27 -Coding Exercise 60 Binary Search Tree insert Exercise-/my-solution.js
V28 -Coding Exercise 61: Binary Search Tree - find-:
  Exercise Description:
    Implement the findIteratively functions on the -BinarySearchTree.prototype-. 
    This function should find a node in a binary tree. 
    It should return the node if found, otherwise return -undefined-. 
    This should be solved using iteration or recursion. 
    The tests for this method assume that insertIteratively has been implemented correctly.
  My Solution:
    ../Scripts/V28 -Coding Exercise 61 Binary Search Tree find-/my-solution.js 
V29 -Coding Exercise 62: Binary Search Tree - DFS Exercise-:
  Exercise Description:
    Implement the following functions on the BinarySearchTree.prototype.
      DFSPreOrder
        Search through each node in the binary search tree using pre-order depth first search.
        Return an array containing each node's value.
        Inputs & Outputs Examples: 
          const binarySearchTree = new BinarySearchTree();
          binarySearchTree
            .insert(15)
            .insert(20)
            .insert(10)
            .insert(12)
            .insert(1)
            .insert(5)
            .insert(50);
          binarySearchTree.DFSPreOrder() // [15, 10, 1, 5, 12, 20, 50]
      DFSInOrder
        Search through each node in the binary search tree using in-order depth first search.
        Return an array containing each node's value.
        Inputs & Outputs Examples:
          const binarySearchTree = new BinarySearchTree();
          binarySearchTree
            .insert(15)
            .insert(20)
            .insert(10)
            .insert(12)
            .insert(1)
            .insert(5)
            .insert(50);
          binarySearchTree.DFSInOrder() // [1, 5, 10, 12, 15, 20, 50]
      DFSPostOrder
        Search through each node in the binary search tree using post-order depth first search.
        Return an array containing each node's value.
        Inputs & Outputs Examples:
          const binarySearchTree = new BinarySearchTree();
          binarySearchTree
            .insert(15)
            .insert(20)
            .insert(10)
            .insert(12)
            .insert(1)
            .insert(5)
            .insert(50);
          binarySearchTree.DFSPostOrder() // [5, 1, 12, 10, 50, 20, 15]
  My Solution:
    ../Scripts/V29 -Coding Exercise 62 Binary Search Tree DFS Exercise-/my-solution.js
V30 -Coding Exercise 63: Binary Search Tree - BFS Exercise-:
  Exercise Description:
    Implement the breadthFirstSearch function on the BinarySearchTree.prototype.
    It should search through each node in the binary search tree using breadth first search.
    Return an array containing each node's value.
    Inputs & Outputs Examples:
      const binarySearchTree = new BinarySearchTree();
      binarySearchTree
        .insert(15)
        .insert(20)
        .insert(10)
        .insert(12)
        .insert(1)
        .insert(5)
        .insert(50);
      binarySearchTree.breadthFirstSearch() // [(15, 10, 20, 1, 12, 50, 5)];
  My Solution:
    ../Scripts/V30 -Coding Exercise 63 Binary Search Tree BFS Exercise-/my-solution.js
V31 -Coding Exercise 64: Binary Search Tree - remove Exercise-:
  Exercise Description:
    Implement the remove function on the BinarySearchTree.prototype.
    This function should remove a node from a binary search tree. 
    Your remove function should be able to handle: 
      Removal of the root node.
      Removal of a node with one child.
      Removal of a node with two children. 
    The function should return the node removed.
    Inputs & Outputs Examples:
      Example 1:
        const binarySearchTree = new BinarySearchTree();
        binarySearchTree
          .insert(15)
          .insert(20)
          .insert(10)
          .insert(12)
          .insert(1)
          .insert(5)
          .insert(50);
        binarySearchTree.remove(50);
        binarySearchTree.root.right.value // 20
        binarySearchTree.root.right.right // null
      More Examples are in the solution file for test. 
  My Solution:
    ../Scripts/V31 -Coding Exercise 64 Binary Search Tree remove Exercise-/my-solution.js
  ChatGPT Shorter Solution:
    ../Scripts/V31 -Coding Exercise 64 Binary Search Tree remove Exercise-/chatgpt-solution.js
V32 -Coding Exercise 65: Binary Search Tree Exercise - Find 2nd largest node-:
  Exercise Description:
    Write the findSecondLargest function on the BinarySearchTree class:
    Finds and returns the second largest value in the BST. 
    If the tree has fewer than two nodes, return undefined.
    Inputs & Outputs Example:
      Example 1:
        const binarySearchTree = new BinarySearchTree();
        binarySearchTree.insert(15);
        binarySearchTree.insert(20);
        binarySearchTree.insert(10);
        binarySearchTree.insert(12);
        binarySearchTree.findSecondLargest(); // returns 15
      Example 2:
        const binarySearchTree2 = new BinarySearchTree();
        binarySearchTree2.insert(10);
        binarySearchTree2.findSecondLargest(); // returns undefined    
  My Solution:
    ../Scripts/V32 -...-/my-solution.js
V33 -Coding Exercise 66: Binary Search Tree Exercise - Check if balanced-:
  Exercise Description:
    Write the isBalanced function on the BinarySearchTree class:
      It returns true if the BST is balanced, otherwise returns false.
    A balanced tree is defined as a tree where: 
      The depth of all leaf nodes or nodes with single children differ by no more than one.
  My Solution:
    ../Scripts/V33 -...-/my-solution.js
  Chatgpt Solution:
    ../Scripts/V33 -...-/chatgpt-solution.js
V34 -Coding Exercise 67: BinaryHeap - insert Exercise-:
  Exercise Description:
    Implement the insert functions on the maxBinaryHeap class.
    This function should insert a node in a binary heap. 
    Make sure to re-order the heap after insertion if necessary.
  My Solution:
    ../Scripts/V34 -Coding Exercise 67 BinaryHeap insert Exercise-/my-solution.js
V35 -Coding Exercise 68: BinaryHeap - extractMax Exercise-:
  Exercise Description:
    Implement the extractMax functions on the maxBinaryHeap class.
    It should remove the root node in a binary heap. 
    Make sure to re-order the heap after removal if necessary.
  My Solution:
    ../Scripts/V35 -Coding Exercise 68 BinaryHeap extractMax Exercise-/my-solution.js
  Chatgpt Solution:
    ../Scripts/V35 -Coding Exercise 68 BinaryHeap extractMax Exercise-/chatgpt-solution.js
      Since we always care about the biggest child we can: 
        Extract first and then do the comparison just with it.
  Avoid Shift:
    Instead of shifting in array it's better to: 
      Swap the first and the last item and then apply the pop method.
V36 -Coding Exercise 69: Graphs Exercise - addVertex-:
  Exercise Description:
    Implement the addVertex method on the Graph class.
    It should: 
      Add a node to the graph.
      Place a new key in the adjacency list with the value of an empty array.
  My Solution:
    ../Scripts/V36 -Coding Exercise 69 Graphs Exercise addVertex-/my-solution.js




























































V37 -Coding Exercise 70: Graphs Exercise - removeEdge-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V38 -Coding Exercise 71: Graphs Exercise - removeVertex-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V39 -Coding Exercise 72: Graphs - DFS Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V40 -Coding Exercise 73: Graphs Exercise - addEdge-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V41 -Coding Exercise 74: Graphs - BFS Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V42 -Coding Exercise 75: Graphs - Dijkstra Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V43 -Coding Exercise 76: Dynamic Programming - Coin Change-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V44 -Coding Exercise 77: Coin Change - Greedy Algorithm-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V45 -Coding Exercise 78: Frequency Counter - constructNote-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V46 -Coding Exercise 79: Frequency Counter - findAllDuplicates-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V47 -Coding Exercise 80: Frequency Counter / Multiple Pointer - findPair-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V48 -Coding Exercise 81: Trie Exercise - addWord-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V49 -Coding Exercise 82: Trie Exercise - findWord-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V50 -Coding Exercise 83: Trie Exercise - getWords-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V51 -Coding Exercise 84: Trie Exercise - autoComplete-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V52 -Coding Exercise 85: Trie Exercise - removeWord-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
===================================================================================================