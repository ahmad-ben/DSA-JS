V1 -PREREQUISITES-:
  Mandatory section:
    Section 1: BIG O NOTATION.
    Section 18: DATA STRUCTURES INTRO.
    Section 19: SINGLY LINKED LISTS.
  Highly recommended section:
    Section 20: DOUBLY LINKED LISTS.
V2 -Intro to Stacks-:
  OBJECTIVES:
    Define what a stack is.
    Understand use cases for a stack.
    Implement operations on a stack data structure.
  What is a Stack:
    See:
      ../Assets/V2 -Intro to Stacks-/Stack.png
    The Stack and Queue both are data collections.
      There are data structure, they're an abstract data structure.
    It follows the LIFO principle so the Stack is a LIFO data structure!
      Last In First Out.
      The last element added to the stack will be the first element removed from the stack.
    There's more than one way to implement a Stack, we could use a linked list.
    We see the same follow of work in the Call Stack before!!
  WHERE STACKS ARE USED:
    Managing function invocations.
      In many, many programming languages. really commonly used.
    Undo / Redo.
      Undo and redo functionality like in hitting -Ctrl + Z- in PhotoShop.
    Routing -the history object- is treated like a stack!
      History objects in your browser.
      Many front end frameworks like React use a stack to model the history, the pages you viewed.
    In this course, we'll actually use stacks and some of our own algorithms.
      We're going to use them as an intermediate in our algorithm.
V3 -Creating a Stack with an Array-:
  Stack:
    Just a concept.
    It's basically a set of rules that says.
      We need to be able to store data in such a way that:
        The first thing added in is the last thing removed. 
        The last thing added in is the first thing removed.
    It doesn't really define how you do that.
    There's more than one way of doing it.
    Some programming languages come with their own stack data type, but JS doesn't.
  Create a Stack using an array:
    ../Scripts/V3 -Creating a Stack with an Array-/script.js
    The easiest way.
    We have two approaches to achieve what we want:
      Use -push- along with -pop-.
        The more efficient approach.
      Use -unshift- and -shift- in tandem.
        It's not recommended since we will have to ReIndex each time we use one of these methods.
    If somebody add to the middle of the array, it's not quite functioning as a stack anymore.
    If we care about the efficiency, then:
      We don't want to use an arrays,
        There is no reason to have the indices and the other array capabilities here.
      We can use the Singly Linked List.
V4 -Writing Our Own Stack From Scratch-:
  My Early try To Create Stack:
    ../Scripts/V4 -Writing Our Own Stack From Scratch-/my-early-try.js
  Constructor Implementation:
    ../Scripts/V4 -Writing Our Own Stack From Scratch-/constructor-implementation.js
  Stacks and SLL:
    We will use almost the same methods and structure from the SLL.
    The stack here will be like a subset or a special case of a SLL.
    The normal behavior of the pop method in the SLL will not be suitable in our case because:
      The pop in SLL is O(n), and the push and pop in our Stack should be always O(1).
  Stack Methods:
    PUSH: 
      Add a value to the top of the stack!
      PUSHING PseudoCode:
        The function should accept a value.
        Create a new node with that value.
        If there are no nodes in the stack: 
          Set the first and last property to be the newly created node. 
        If there is at least one node:
          Create a variable that stores the current first property on the stack.
        Reset the first property to be the newly created node.
        Set the next property on the node to be the previously created variable.
        Increment the size of the stack by 1.
    POP:
      Remove a value from the top of the stack!
      If there are no nodes in the stack, return null.
      Create a temporary variable to store the first property on the stack.
      If there is only 1 node, set the first and last property to be null.
      If there is more than one node: 
        Set the first property to be the next property on the current first.
      Decrement the size by 1.
      Return the value of the node removed.
  Code Shortcut:
    Instead of increment a number in a line and return it in the second, we can:
      Increment and then return it directly in one line.
    See:
      ../Scripts/V4 -Writing Our Own Stack From Scratch-/code-shortcut.js
V5 -BIG O of Stacks-:
  Stack And Big O:
    Insertion from the beginning is O(1).
    Removal from the beginning is O(1).
    Searching and Index Access:
      O(n), since we will use the next property again and again until find what we want.
      Shouldn't be important, if they are: 
        We should think about using array or any other suitable data structure.  
  RECAP
    Stacks are a LIFO data structure where the last value in is always the first one out.
    Stacks are used to handle function invocations -the call stack-, for operations like: 
      undo/redo. 
      Routing -remember pages you have visited and go back/forward-.
      Much more!
    They are not a built in data structure in JavaScript, but are relatively simple to implement.
    Insert and remove are both O(1).
V6 -Intro to Queues-:
  OBJECTIVES:
    Define what a queue is.
    Understand use cases for a queue.
    Implement operations on a queue data structure.
  WHAT IS A QUEUE?
  A FIFO data structure!
    First In First Out.
  WE'VE SEEN THIS BEFORE
    Queues exist everywhere! Think about the last time you waited in line....
    In programming:
      Background tasks.
      Uploading resources.
      Printing / Task processing.
  We can implement them in multiple way exactly like Stacks we can use:
    Arrays.
    SLL.
V7 -Creating Queues Using Arrays-:
  My Implementation:
    ../Scripts/V7 -Creating Queues Using Arrays-/queues-by-arrays-early-try.js
  Two Approaches To Create a Queue from an Array:
    Use -push- and -shift- methods:
      The Shift Method is O(n), so it's not the most optimal way of doing things.
    Use -unshift- and -pop- methods:
      The UnShift Method is O(n), so it's not the most optimal way of doing things.
  Create a Queue from an array vs Create a Stack form an array:
    In Stack creation we can use -push- along with -pop- and they are both O(1).
    In Queue creation we don't have an optimal way, one of our methods will be O(n).
V8 -Writing Our Own Queue From Scratch-:
  My Early try To Create Stack:
    ../Scripts/V8 -Writing Our Own Queue From Scratch-/my-early-try.js
  Constructor Implementation:
    ../Scripts/V8 -Writing Our Own Queue From Scratch-/constructor-implementation.js
  Enqueue 
    Adding to the beginning of the Queue!
  Enqueue PseudoCode
    This function accepts some value.
    Create a new node using that value passed to the function.
    If there are no nodes in the queue. 
      Set this node to be the first and last property of the queue.
    Otherwise: 
      Set the next property on the current last to be that node.
      Set the last property of the queue to be that node.
    Increment the size of the queue by 1.
  Dequeue
    Removing from the beginning of the Queue!
  Dequeue PseudoCode:
    If there is no first property, just return null.
    Store the first property in a variable.
    See if the first is the same as the last -check if there is only 1 node-. 
      If so, set the first and last to be null.
    If there is more than 1 node, set the first property to be the next property of first.
    Decrement the size by 1.
    Return the value of the node dequeued.
V9 -BIG O of Queues-:
  Stack And Big O:
    Insertion from the beginning is O(1).
    Removal from the beginning is O(1).
    Searching and Index Access are O(n).
      If you need to prioritize searching or accessing don't use a Queue data structure.
  RECAP
    Queues are a FIFO data structure, all elements are first in first out.
    Queues are useful for processing tasks and are foundational for more complex data structures.
    Queues are foundational for more complex data structures and algorithms.
    Insertion and Removal should be O(1).
    They are used to maintain the order.
===================================================================================================