V1 -VERY IMPORTANT NOTE! PLEASE READ!-:
  Important Note!
    This section is the wild west of this course.  
    It contains all the exercises the constructor work on adding to the rest of the course.  
      The exercise may be not 100% finished, keep this in your mind.
V2 -Coding Exercise 35: SLL - push Exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 68.
  My Solution:
    ../Scripts/V2 -Coding Exercise 35 SLL push Exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V4 -...-/constructor-solution.js
V3 -Coding Exercise 36: SLL - pop exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 91.
  My Solution:
    ../Scripts/V3 -Coding Exercise 36 SLL pop exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V6 -...-/constructor-solution.js
V4 -Coding Exercise 37: SLL - get Exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 141.
  My Solution:
    ../Scripts/V4 -Coding Exercise 37 SLL get Exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V12 -...-/constructor-solution.js
V5 -Coding Exercise 38: SLL - set Exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 153.
  My Solution:
    ../Scripts/V5 -Coding Exercise 38 SLL set Exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V14 -...-/constructor-solution.js
V6 -Coding Exercise 39: SLL - insert Exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 166.
  My Solution:
    ../Scripts/V6 -Coding Exercise 39 SLL insert Exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V16 -...-/constructor-solution.js
V7 -Coding Exercise 40: SLL - remove Exercise-:
  Exercise Description:
    See:
      ../../Section 19 -Singly Linked Lists-/Notes/note.txt
        Line 192.
  My Solution:
    ../Scripts/V7 -Coding Exercise 40 SLL remove Exercise-/my-solution.js
  Constructor Solution:
    ../../Section 19 -Singly Linked Lists-/Scripts/V18 -...-/constructor-solution.js
V8 -Coding Exercise 41: SLL - rotate Exercise-:
  Exercise Description:
    SLL - rotate Exercise
    Implement the rotate function on the SinglyLinkedList class.
    This function should rotate all the nodes in the list by some number passed in. For instance:
      If your list looks like 1 -> 2 -> 3 -> 4 -> 5 and you rotate by 2. 
      The list should be modified to 3 -> 4 -> 5 -> 1 -> 2. 
      The number passed in to rotate can be any integer.
        Time Complexity: O(N), where N is the length of the list.
        Space Complexity: O(1).
  My Solution:
    ../Scripts/V8 -Coding Exercise 41 SLL rotate Exercise-/my-solution.js
V9 -Coding Exercise 42: Divide and Conquer - countZeroes-:
  Exercise Description:
    Given an array of 1s and 0s which has all 1s first followed by all 0s. 
    Write a function called countZeroes, which returns the number of zeroes in the array.
    Constraints
      Time Complexity - O(log n)
    Inputs & Outputs Examples:
      countZeroes([1,1,1,1,0,0])  => 2
      countZeroes([1,0,0,0,0])    => 4
      countZeroes([0,0,0])        => 3
      countZeroes([1,1,1,1])      => 0
    See:
  My Solution:
    ../Scripts/V9 -Coding Exercise 42 Divide and Conquer countZeroes-/my-solution.js
V10 -Coding Exercise 43: Divide and Conquer - sortedFrequency-:
  Exercise Description:
    Given a sorted array and a number. 
    Write a function called sortedFrequency that counts the occurrences of the number in the array.
    Constraints:
      Time Complexity: O(log n)
    Inputs & Outputs Examples:
      sortedFrequency([1,1,2,2,2,2,3],2) // 4 
      sortedFrequency([1,1,2,2,2,2,3],3) // 1 
      sortedFrequency([1,1,2,2,2,2,3],1) // 2 
      sortedFrequency([1,1,2,2,2,2,3],4) // -1
    See:
  My Solutions:
    Initial solution:
      ../Scripts/V10 -Coding Exercise 43 Divide and Conquer sortedFrequency-/my-solution.js
        After asking CHATGPT i found that the first solution may not be always O(log n).
    Enhanced Solution:
      ../Scripts/V10 -...-/my-enhanced-solution.js
        After getting the general idea of the optimal solution from CHATGPT.
  CHATGPT solution:
    ../Scripts/V10 -Coding Exercise 43 Divide and Conquer sortedFrequency-/chatgpt-solution.js
V11 -Coding Exercise 44: Divide and Conquer - findRotatedIndex-:
  Exercise Description:
    Write a function called findRotatedIndex. 
    It accepts a rotated array of sorted numbers and an integer. 
    The function should return the index of the integer in the array. 
    If the value is not found, return -1.
    Constraints:
      Time Complexity - O(log n)
      Space Complexity - O(1)
    Inputs & Outputs Examples:
      findRotatedIndex([3,4,1,2],4)                     => 1
      findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 8)     => 2
      findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 3)     => 6
      findRotatedIndex([37,44,66,102,10,22],14)         => -1
      findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 12)    => -1
      findRotatedIndex([11,12,13,14,15,16,3,5,7,9], 16) => 5
  My Solution:
    ../Scripts/V11 -Coding Exercise 44 Divide and Conquer findRotatedIndex-/my-solution.js
V12 -Coding Exercise 45: Bubble Sort-:
  Exercise Description:
    Implement a function called bubbleSort. 
    Given an array, bubbleSort will sort the values in the array. 
    The function takes 2 parameters: 
      an array and an optional comparator function.
        function bubbleSort(arr, comparator) {
          if (typeof comparator !== 'function') {
            // provide a default
          }
        }
      Comparator function is a callback that will take two values from the array to be compared. 
      The function returns:
        Negative value if the first value is less than the second.
        Positive value if the first value is greater than the second. 
        0 if both values are equal.
      The default comparator you provide should assume that the two parameters are numbers. 
        That we are sorting the values from smallest to largest.
      Bubble sort is an O(n^2) algorithm. 
        You can read more about it here: 
          rithmschool.com/courses/javascript-computer-science-fundamentals/basic-sorting-algorithms
    Inputs & Outputs Examples:
      bubbleSort([4, 20, 12, 10, 7, 9]);  => [4, 7, 9, 10, 12, 20]
      bubbleSort([0, -10, 7, 4]);         => [-10, 0, 4, 7]
      bubbleSort([1, 2, 3]);              => [1, 2, 3]
      bubbleSort([]);
      More Examples are in the solution file for test.
  My Solution:
    ../Scripts/V12 -Coding Exercise 45 Bubble Sort-/my-solution.js
  CHATGPT Solution:
    ../Scripts/V12 -Coding Exercise 45 Bubble Sort-/chatgpt-solution.js
V13 -Coding Exercise 46: Selection Sort-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts














































V14 -Coding Exercise 47: Insertion Sort-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V15 -Coding Exercise 48: Sorting Exercise - merge helper-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V16 -Coding Exercise 49: Merge Sort-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V17 -Coding Exercise 50: Sorting Exercise - pivot helper-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V18 -Coding Exercise 51: Quick Sort-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V19 -Coding Exercise 52: Radix Sort Helper - getDigit-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V20 -Coding Exercise 53: Radix Sort Helper - digitCount-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V21 -Coding Exercise 54: Radix Sort Helper - mostDigits-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V22 -Coding Exercise 55: Radix Sort-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V23 -Coding Exercise 56: Stacks - push Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V24 -Coding Exercise 57: Stacks - pop Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V25 -Coding Exercise 58: Stack with 2 Queues-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V26 -Coding Exercise 59: Queues - enqueue Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V27 -Coding Exercise 60: Binary Search Tree - insert Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V28 -Coding Exercise 61: Binary Search Tree - find-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V29 -Coding Exercise 62: Binary Search Tree - DFS Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V30 -Coding Exercise 63: Binary Search Tree - BFS Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V31 -Coding Exercise 64: Binary Search Tree - remove Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V32 -Coding Exercise 65: Binary Search Tree Exercise - Find 2nd largest node-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V33 -Coding Exercise 66: Binary Search Tree Exercise - Check if balanced-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V34 -Coding Exercise 67: BinaryHeap - insert Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V35 -Coding Exercise 68: BinaryHeap - extractMax Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V36 -Coding Exercise 69: Graphs Exercise - addVertex-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V37 -Coding Exercise 70: Graphs Exercise - removeEdge-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V38 -Coding Exercise 71: Graphs Exercise - removeVertex-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V39 -Coding Exercise 72: Graphs - DFS Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V40 -Coding Exercise 73: Graphs Exercise - addEdge-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V41 -Coding Exercise 74: Graphs - BFS Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V42 -Coding Exercise 75: Graphs - Dijkstra Exercise-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V43 -Coding Exercise 76: Dynamic Programming - Coin Change-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V44 -Coding Exercise 77: Coin Change - Greedy Algorithm-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V45 -Coding Exercise 78: Frequency Counter - constructNote-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V46 -Coding Exercise 79: Frequency Counter - findAllDuplicates-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V47 -Coding Exercise 80: Frequency Counter / Multiple Pointer - findPair-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V48 -Coding Exercise 81: Trie Exercise - addWord-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V49 -Coding Exercise 82: Trie Exercise - findWord-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V50 -Coding Exercise 83: Trie Exercise - getWords-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V51 -Coding Exercise 84: Trie Exercise - autoComplete-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
V52 -Coding Exercise 85: Trie Exercise - removeWord-:
  Exercise Description:
    See:
  My Solution:
    "../Scripts
  Constructor Solution:
    "../Scripts
===================================================================================================



/*

Add the exercices here
See my previous solutions and construtor prev POP?
see the current construtor solution

*/